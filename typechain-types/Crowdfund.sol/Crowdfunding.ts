/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CrowdfundingInterface extends Interface {
  getFunction(
    nameOrSignature: "contribute" | "createProject" | "returnAllProjects"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ContributionReceived" | "ProjectStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "contribute",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnAllProjects",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnAllProjects",
    data: BytesLike
  ): Result;
}

export namespace ContributionReceivedEvent {
  export type InputTuple = [
    projectAddress: AddressLike,
    contributedAmount: BigNumberish,
    contributor: AddressLike
  ];
  export type OutputTuple = [
    projectAddress: string,
    contributedAmount: bigint,
    contributor: string
  ];
  export interface OutputObject {
    projectAddress: string;
    contributedAmount: bigint;
    contributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectStartedEvent {
  export type InputTuple = [
    projectContractAddress: AddressLike,
    creator: AddressLike,
    minContribution: BigNumberish,
    projectDeadline: BigNumberish,
    goalAmount: BigNumberish,
    currentAmount: BigNumberish,
    noOfContributors: BigNumberish,
    title: string,
    desc: string,
    currentState: BigNumberish
  ];
  export type OutputTuple = [
    projectContractAddress: string,
    creator: string,
    minContribution: bigint,
    projectDeadline: bigint,
    goalAmount: bigint,
    currentAmount: bigint,
    noOfContributors: bigint,
    title: string,
    desc: string,
    currentState: bigint
  ];
  export interface OutputObject {
    projectContractAddress: string;
    creator: string;
    minContribution: bigint;
    projectDeadline: bigint;
    goalAmount: bigint;
    currentAmount: bigint;
    noOfContributors: bigint;
    title: string;
    desc: string;
    currentState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Crowdfunding extends BaseContract {
  connect(runner?: ContractRunner | null): Crowdfunding;
  waitForDeployment(): Promise<this>;

  interface: CrowdfundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contribute: TypedContractMethod<
    [_projectAddress: AddressLike],
    [void],
    "payable"
  >;

  createProject: TypedContractMethod<
    [
      minimumContribution: BigNumberish,
      deadline: BigNumberish,
      targetContribution: BigNumberish,
      projectTitle: string,
      projectDesc: string
    ],
    [void],
    "nonpayable"
  >;

  returnAllProjects: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[_projectAddress: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      minimumContribution: BigNumberish,
      deadline: BigNumberish,
      targetContribution: BigNumberish,
      projectTitle: string,
      projectDesc: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "returnAllProjects"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "ContributionReceived"
  ): TypedContractEvent<
    ContributionReceivedEvent.InputTuple,
    ContributionReceivedEvent.OutputTuple,
    ContributionReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectStarted"
  ): TypedContractEvent<
    ProjectStartedEvent.InputTuple,
    ProjectStartedEvent.OutputTuple,
    ProjectStartedEvent.OutputObject
  >;

  filters: {
    "ContributionReceived(address,uint256,address)": TypedContractEvent<
      ContributionReceivedEvent.InputTuple,
      ContributionReceivedEvent.OutputTuple,
      ContributionReceivedEvent.OutputObject
    >;
    ContributionReceived: TypedContractEvent<
      ContributionReceivedEvent.InputTuple,
      ContributionReceivedEvent.OutputTuple,
      ContributionReceivedEvent.OutputObject
    >;

    "ProjectStarted(address,address,uint256,uint256,uint256,uint256,uint256,string,string,uint256)": TypedContractEvent<
      ProjectStartedEvent.InputTuple,
      ProjectStartedEvent.OutputTuple,
      ProjectStartedEvent.OutputObject
    >;
    ProjectStarted: TypedContractEvent<
      ProjectStartedEvent.InputTuple,
      ProjectStartedEvent.OutputTuple,
      ProjectStartedEvent.OutputObject
    >;
  };
}
