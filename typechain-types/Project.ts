/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ProjectInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contribute"
      | "contributors"
      | "createWithdrawRequest"
      | "creator"
      | "deadline"
      | "getContractBalance"
      | "getProjectDetails"
      | "minimumContribution"
      | "noOfContributors"
      | "numOfWithdrawRequests"
      | "projectDes"
      | "projectTitle"
      | "raisedAmount"
      | "requestRefund"
      | "state"
      | "targetContribution"
      | "voteWithdrawRequest"
      | "withdrawRequestedAmount"
      | "withdrawRequests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AmountWithdrawSuccessful"
      | "FundingReceived"
      | "WithdrawRequestCreated"
      | "WithdrawVote"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "contribute",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawRequest",
    values: [string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "noOfContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOfWithdrawRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectDes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectTitle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raisedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRefund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequestedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noOfContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projectDes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raisedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequests",
    data: BytesLike
  ): Result;
}

export namespace AmountWithdrawSuccessfulEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    description: string,
    amount: BigNumberish,
    noOfVotes: BigNumberish,
    isCompleted: boolean,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    description: string,
    amount: bigint,
    noOfVotes: bigint,
    isCompleted: boolean,
    recipient: string
  ];
  export interface OutputObject {
    requestId: bigint;
    description: string;
    amount: bigint;
    noOfVotes: bigint;
    isCompleted: boolean;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundingReceivedEvent {
  export type InputTuple = [
    contributor: AddressLike,
    amount: BigNumberish,
    currentTotal: BigNumberish
  ];
  export type OutputTuple = [
    contributor: string,
    amount: bigint,
    currentTotal: bigint
  ];
  export interface OutputObject {
    contributor: string;
    amount: bigint;
    currentTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestCreatedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    description: string,
    amount: BigNumberish,
    noOfVotes: BigNumberish,
    isCompleted: boolean,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    description: string,
    amount: bigint,
    noOfVotes: bigint,
    isCompleted: boolean,
    recipient: string
  ];
  export interface OutputObject {
    requestId: bigint;
    description: string;
    amount: bigint;
    noOfVotes: bigint;
    isCompleted: boolean;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawVoteEvent {
  export type InputTuple = [voter: AddressLike, totalVote: BigNumberish];
  export type OutputTuple = [voter: string, totalVote: bigint];
  export interface OutputObject {
    voter: string;
    totalVote: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Project extends BaseContract {
  connect(runner?: ContractRunner | null): Project;
  waitForDeployment(): Promise<this>;

  interface: ProjectInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contribute: TypedContractMethod<
    [_contributor: AddressLike],
    [void],
    "payable"
  >;

  contributors: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createWithdrawRequest: TypedContractMethod<
    [_description: string, _amount: BigNumberish, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  creator: TypedContractMethod<[], [string], "view">;

  deadline: TypedContractMethod<[], [bigint], "view">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getProjectDetails: TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        projectStarter: string;
        minContribution: bigint;
        projectDeadline: bigint;
        goalAmount: bigint;
        completedTime: bigint;
        currentAmount: bigint;
        title: string;
        desc: string;
        currentState: bigint;
        balance: bigint;
      }
    ],
    "view"
  >;

  minimumContribution: TypedContractMethod<[], [bigint], "view">;

  noOfContributors: TypedContractMethod<[], [bigint], "view">;

  numOfWithdrawRequests: TypedContractMethod<[], [bigint], "view">;

  projectDes: TypedContractMethod<[], [string], "view">;

  projectTitle: TypedContractMethod<[], [string], "view">;

  raisedAmount: TypedContractMethod<[], [bigint], "view">;

  requestRefund: TypedContractMethod<[], [boolean], "nonpayable">;

  state: TypedContractMethod<[], [bigint], "view">;

  targetContribution: TypedContractMethod<[], [bigint], "view">;

  voteWithdrawRequest: TypedContractMethod<
    [_requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawRequestedAmount: TypedContractMethod<
    [_requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, string] & {
        description: string;
        amount: bigint;
        noOfVotes: bigint;
        isCompleted: boolean;
        recipient: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[_contributor: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "contributors"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createWithdrawRequest"
  ): TypedContractMethod<
    [_description: string, _amount: BigNumberish, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProjectDetails"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        projectStarter: string;
        minContribution: bigint;
        projectDeadline: bigint;
        goalAmount: bigint;
        completedTime: bigint;
        currentAmount: bigint;
        title: string;
        desc: string;
        currentState: bigint;
        balance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "minimumContribution"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "noOfContributors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numOfWithdrawRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projectDes"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectTitle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "raisedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestRefund"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetContribution"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voteWithdrawRequest"
  ): TypedContractMethod<[_requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRequestedAmount"
  ): TypedContractMethod<[_requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, string] & {
        description: string;
        amount: bigint;
        noOfVotes: bigint;
        isCompleted: boolean;
        recipient: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AmountWithdrawSuccessful"
  ): TypedContractEvent<
    AmountWithdrawSuccessfulEvent.InputTuple,
    AmountWithdrawSuccessfulEvent.OutputTuple,
    AmountWithdrawSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "FundingReceived"
  ): TypedContractEvent<
    FundingReceivedEvent.InputTuple,
    FundingReceivedEvent.OutputTuple,
    FundingReceivedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequestCreated"
  ): TypedContractEvent<
    WithdrawRequestCreatedEvent.InputTuple,
    WithdrawRequestCreatedEvent.OutputTuple,
    WithdrawRequestCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawVote"
  ): TypedContractEvent<
    WithdrawVoteEvent.InputTuple,
    WithdrawVoteEvent.OutputTuple,
    WithdrawVoteEvent.OutputObject
  >;

  filters: {
    "AmountWithdrawSuccessful(uint256,string,uint256,uint256,bool,address)": TypedContractEvent<
      AmountWithdrawSuccessfulEvent.InputTuple,
      AmountWithdrawSuccessfulEvent.OutputTuple,
      AmountWithdrawSuccessfulEvent.OutputObject
    >;
    AmountWithdrawSuccessful: TypedContractEvent<
      AmountWithdrawSuccessfulEvent.InputTuple,
      AmountWithdrawSuccessfulEvent.OutputTuple,
      AmountWithdrawSuccessfulEvent.OutputObject
    >;

    "FundingReceived(address,uint256,uint256)": TypedContractEvent<
      FundingReceivedEvent.InputTuple,
      FundingReceivedEvent.OutputTuple,
      FundingReceivedEvent.OutputObject
    >;
    FundingReceived: TypedContractEvent<
      FundingReceivedEvent.InputTuple,
      FundingReceivedEvent.OutputTuple,
      FundingReceivedEvent.OutputObject
    >;

    "WithdrawRequestCreated(uint256,string,uint256,uint256,bool,address)": TypedContractEvent<
      WithdrawRequestCreatedEvent.InputTuple,
      WithdrawRequestCreatedEvent.OutputTuple,
      WithdrawRequestCreatedEvent.OutputObject
    >;
    WithdrawRequestCreated: TypedContractEvent<
      WithdrawRequestCreatedEvent.InputTuple,
      WithdrawRequestCreatedEvent.OutputTuple,
      WithdrawRequestCreatedEvent.OutputObject
    >;

    "WithdrawVote(address,uint256)": TypedContractEvent<
      WithdrawVoteEvent.InputTuple,
      WithdrawVoteEvent.OutputTuple,
      WithdrawVoteEvent.OutputObject
    >;
    WithdrawVote: TypedContractEvent<
      WithdrawVoteEvent.InputTuple,
      WithdrawVoteEvent.OutputTuple,
      WithdrawVoteEvent.OutputObject
    >;
  };
}
